setuid can run program with system admin privileges

Buffer Overflow
Why bad?
- execute arbitrary code
- modify data, ddos, core dump
When happen?
- When code doesn't validate length of data being written to buffer

can overrite some other var and cause unexpect behavior


Benign overflow:
- overflow with random data
- segfault, AVAILABILITY ATTACK

Malicious overflow
- fill buffer with executable code
- overflow the rbp to a new address
- rbp will now point to malicious code that will be exected after func returns

If don't know exactly where to point to the malicious code,
can pad the code with NOP instructions so it still executes
- landing zone


OS is in high mem vals
stack grows to low addrs
heap grow to high
====
Comp arch brush up...

call stack
push func param1
push func param2
call func


rbp = frame ptr (base ptr)
pointer to previous function call, stored on stack
rsp = current stack pointer (top of stack)

rbp = 64bit
ebp = 32bit


=================

Heap and Text overflow

initialize a[]
initialize b[]

copy a large af string to b, can overflow into a

============
printf

if not give enough param to printf, it will check stack for variables 
and print random shit

printf %n, puts te number of bytes written, into a var
=======

fuzzing = test program with input 

======== 
dealing with buff overflow

can we just disallow executig code on stack?!?!?!?!

cannot inject code with something that i didnt write


====== 
bypass this

cant inject code, but there is already code on the system
return to lib-c attack
can execute the system function (make a bash call)

=====
return oriented programming

similar to lib-c attack
override return address w/ lib func address
gadget = sequence of stack frames to do any code
execute arbitrary code without injection

====
fix this

address space layout randomization (ASLR)

stack canary
- put a random int before return address
- before returning, check that the int is still there
- if not there, there was prob a buffer overflow